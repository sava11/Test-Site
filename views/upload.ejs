<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bulma Drag & Drop Upload</title>
  <!-- Bulma CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
  <style>
    .file-drop-zone {
      border: 2px dashed #00d1b2;
      padding: 2rem;
      text-align: center;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .file-drop-zone.is-dragover {
      background-color: rgba(0, 209, 178, 0.1);
    }
  </style>
</head>
<body>
<section class="section">
  <div class="container">
    <h1 class="title">Drag & Drop File Upload</h1>
    <!-- Upload form -->
    <div id="drop-zone" class="file-drop-zone">
      <p class="has-text-grey">Перетащите файл сюда или нажмите, чтобы выбрать</p>
      <input id="file-input" class="file-input" type="file" name="file" hidden>
    </div>
    <progress id="upload-progress" class="progress is-primary" value="0" max="100" style="display: none;"></progress>
    <div id="message" class="notification is-hidden"></div>
  </div>
</section>

<script>
const dropZone = document.getElementById('drop-zone');
const fileInput = document.getElementById('file-input');
const progressBar = document.getElementById('upload-progress');
const messageBox = document.getElementById('message');
const uploadUrl = '/server/file/path';

// Highlight on dragover
['dragenter', 'dragover'].forEach(evt => {
  dropZone.addEventListener(evt, e => {
    e.preventDefault();
    dropZone.classList.add('is-dragover');
  });
});

// Remove highlight
['dragleave', 'drop'].forEach(evt => {
  dropZone.addEventListener(evt, e => {
    e.preventDefault();
    dropZone.classList.remove('is-dragover');
  });
});

// Handle drop
dropZone.addEventListener('drop', e => {
  const files = e.dataTransfer.files;
  if (files.length) uploadFile(files[0]);
});

// Handle click to open file selector
dropZone.addEventListener('click', () => fileInput.click());
fileInput.addEventListener('change', () => {
  if (fileInput.files.length) uploadFile(fileInput.files[0]);
});

function uploadFile(file) {
  const formData = new FormData();
  formData.append('file', file);

  // Show progress bar
  progressBar.style.display = 'block';
  progressBar.value = 0;

  const xhr = new XMLHttpRequest();
  xhr.open('POST', uploadUrl, true);

  xhr.upload.addEventListener('progress', e => {
    if (e.lengthComputable) {
      const percent = (e.loaded / e.total) * 100;
      progressBar.value = percent;
    }
  });

  xhr.onload = () => {
    progressBar.style.display = 'none';
    if (xhr.status === 200) {
      showMessage('Файл успешно загружен.', 'is-success');
    } else {
      showMessage('Ошибка загрузки файла.', 'is-danger');
    }
  };

  xhr.onerror = () => {
    progressBar.style.display = 'none';
    showMessage('Сетевая ошибка.', 'is-danger');
  };

  xhr.send(formData);
}

function showMessage(text, type) {
  messageBox.textContent = text;
  messageBox.className = `notification ${type}`;
  messageBox.classList.remove('is-hidden');
}
</script>
</body>
</html>
